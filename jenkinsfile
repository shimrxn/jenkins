pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                script {
                    echo 'Building the application...'
                    // Use Maven or Gradle as a build tool
                    echo 'Using Maven to build the application.'
                    // Example command: sh 'mvn clean package'
                }
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                script {
                    echo 'Running unit and integration tests...'
                    // Tools: JUnit, TestNG
                    echo 'Using JUnit for unit testing and TestNG for integration testing.'
                    // Example command: sh 'mvn test'
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    echo 'Performing code analysis...'
                    // Tool: SonarQube or Checkstyle
                    echo 'Using SonarQube for code analysis.'
                    // Example command: sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    echo 'Performing security scan...'
                    // Tool: OWASP Dependency-Check
                    echo 'Using OWASP Dependency-Check for security scanning.'
                    // Example command: sh 'dependency-check --project my-app --scan ./'
                }
            }
            post {
                always {
                    emailext (
                        to: 'uoy8006@gmail.com',
                        subject: "Security Scan Completed: ${currentBuild.fullDisplayName}",
                        body: """The security scan stage has completed with status: ${currentBuild.result}.
                                 Logs are attached.""",
                        attachLog: true
                    )
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    echo 'Deploying to staging server...'
                    // Example: Deploy using AWS CLI
                    echo 'Using AWS CLI for deployment to staging.'
                    // Example command: sh 'aws deploy create-deployment --application-name my-app --deployment-group-name staging --s3-location bucket=my-bucket,key=my-app.zip,bundleType=zip'
                }
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                script {
                    echo 'Running integration tests on staging...'
                    // Tool: TestNG or custom scripts
                    echo 'Using TestNG for integration testing on staging.'
                    // Example command: sh 'mvn integration-test -Denv=staging'
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    echo 'Deploying to production server...'
                    // Example: Deploy using AWS CLI
                    echo 'Using AWS CLI for deployment to production.'
                    // Example command: sh 'aws deploy create-deployment --application-name my-app --deployment-group-name production --s3-location bucket=my-bucket,key=my-app.zip,bundleType=zip'
                }
            }
        }
    }

    post {
        success {
            mail to: 'uoy8006@gmail.com',
                 subject: "Jenkins Pipeline Success: ${currentBuild.fullDisplayName}",
                 body: "All stages completed successfully."
        }
        failure {
            mail to: 'uoy8006@gmail.com',
                 subject: "Jenkins Pipeline Failure: ${currentBuild.fullDisplayName}",
                 body: "The pipeline has failed. Please check the logs for details."
        }
    }
}
